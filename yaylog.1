.\" Man page for yaylog
.TH yaylog 1 "March 2025" "yaylog 3.14.0" "User Commands"
.SH NAME
yaylog \- List and filter installed packages on Arch-based systems.
.SH SYNOPSIS
.B yaylog
.RI [ \-n | \-\-number <number> ] [ \-e | \-\-explicit ] [ \-a | \-\-all ] [ \-d | \-\-dependencies ] [ \-\-date <filter> ] [ \-\-size <filter> ] [ \-\-name <search-term> ] [ \-\-sort <mode> ] [ \-\-columns <list> ] [ \-\-add-columns <list> ] [ \-\-json ] [ \-\-full-timestamp ] [ \-\-no-progress ] [ \-h | \-\-help ]
.SH DESCRIPTION
.B yaylog
is a standalone CLI utility for Arch and Arch-based Linux distributions to list and filter installed packages. It works with any package manager that uses ALPM,
including
.B yay,
.B paru,
.B pamac,
.B pacman,
and others.

The utility provides options to filter by explicitly installed packages, dependencies, installation dates, package sizes, and package names. It also supports sorting results by date, alphabetical order, or size.

.SH OPTIONS
.TP
.B \-n, \-\-number <number>
Display the specified number of recent packages (default: 20). Ignored if
.B \-a
or
.B \-\-all
is used.
.TP
.B \-e, \-\-explicit
Show only explicitly installed packages.
.TP
.B \-d, \-\-dependencies
Show only packages installed as dependencies.
.TP
.B \-a, \-\-all
Show all installed packages, ignoring the
.B \-n
or
.B \-\-number
option.
.TP
.B \-\-date <filter>
Filter packages by installation date. Supports exact dates and ranges:
.IP
.B YYYY-MM-DD
: Show packages installed on the specified date.
.IP
.B YYYY-MM-DD:
: Show packages installed on or after the specified date.
.IP
.B :YYYY-MM-DD
: Show packages installed up to the specified date.
.IP
.B YYYY-MM-DD:YYYY-MM-DD
: Show packages installed within a date range.
.TP
.B \-\-size <filter>
Filter results by package size. Supports exact sizes and ranges:
.IP
.B 10MB
: Show packages exactly 10MB in size.
.IP
.B 5GB:
: Show packages 5GB and larger.
.IP
.B :20KB
: Show packages up to 20KB.
.IP
.B 1.5MB:2GB
: Show packages between 1.5MB and 2GB.
.IP
Valid units are B (bytes), KB, MB, or GB.
.TP
.B \-\-name <search-term>
Filter packages by name. Performs a substring match against package names.
For example, searching
.B python
will match both
.B python
and
.B python-pip.
.TP
.B \-\-sort <mode>
Sort results by the specified mode. Available modes:
.IP
.B date
(default): Sort by installation date.
.IP
.B alphabetical
: Sort alphabetically by package name.
.IP
.B size:asc
: Sort by package size in ascending order.
.IP
.B size:desc
: Sort by package size in descending order.
.TP
.B \-\-columns <list>
Specify a comma-separated list of columns to display. Overrides default columns.
Available columns:
.IP
.B date
: Installation date of the package.
.IP
.B name
: Package name.
.IP
.B reason
: Installation reason (explicit/dependency).
.IP
.B size
: Package size on disk.
.IP
.B version
: Installed package version.
.IP
.B depends
: List of dependencies (output can be long).
.IP
.B required-by
: List of packages required by the package and are dependent on it (output can be long)
.IP
.B provides
: List of alternative package names or shared libraries provided by package (output can be long).
.TP
.B \-\-add-columns <list>
Add additional columns to the default display without overriding them.
.TP
.B \-\-json
Output results in JSON format instead of a table. Overrides
.B \-\-full-timestamp
and ensures all fields are structured for automation.
.PP
Example usage:
.PP
.EX
yaylog --json --columns name,version,size
.EE
.PP
JSON output example:
.PP
.EX
[
  {
    "timestamp": "2025-02-11T17:17:30Z",
    "name": "linux-firmware",
    "reason": "dependency",
    "size": 756086774,
    "version": "20250109.7673dffd-1",
    "depends": [
      "linux-firmware-whence"
    ]
  }
]
.EE
.TP
.B \-\-full-timestamp
Display the full timestamp (date and time) of package installations instead of just the date.
Ignored if
.B \-\-json
is used.
.TP
.B \-\-no-progress 
Force disable progress bar outside non-interactive environments.
.TP
.B \-h, \-\-help
Display help information.

.SH ADDITIONAL NOTES
.TP
- All options that take an argument can also be used in the `--<flag>=<argument>` format.
For example:
.PP
.EX
yaylog --size=100MB:1GB --date=:2024-06-30
yaylog --name="gtk" --sort=alphabetical
.EE
.TP
- Boolean flags can be explicitly set using `--<flag>=true` or `--<flag>=false`.
For example:
.PP
.EX
yaylog --explicit=true --dependencies=false
.EE
.TP
- When using multiple short flags, the `-n` flag must be last since it consumes the next argument.
This follows standard Unix-style flag parsing, where positional arguments (like numbers) are treated as separate parameters.
Invalid:
.PP
.EX
yaylog -ne 15  # incorrect usage
.EE
Valid:
.PP
.EX
yaylog -en 15
.EE
.TP
- The `depends`, `required-by`, and `provides` columns output can be lengthy. To improve readability, pipe the output to `less`:
.PP
.EX
yaylog --columns name,depends | less
.EE

.SH EXAMPLES
.TP
Show the last 10 installed packages:
.PP
.EX
yaylog -n 10
yaylog --number 10
.EE
.TP
Show all explicitly installed packages installed after January 1, 2024:
.PP
.EX
yaylog -e --date 2024-01-01:
.EE
.TP
Show only dependencies installed between July 1, 2023, and December 31, 2023:
.PP
.EX
yaylog -d --date 2023-07-01:2023-12-31
.EE
.TP
Show packages between 500KB and 5MB installed up to June 30, 2024:
.PP
.EX
yaylog --size 500KB:5MB --date :2024-06-30
.EE
.TP
Show packages larger than 1GB installed on December 1, 2024:
.PP
.EX
yaylog --size 1GB: --date 2024-12-01
.EE
.TP
Show all packages sorted by size in descending order, installed after January 1, 2024:
.PP
.EX
yaylog -a --sort size:desc --date 2024-01-01:
.EE
.TP
Output package data in JSON format:
.PP
.EX
yaylog --json
.EE
.TP
Save all explicitly installed packages to a JSON file:
.PP
.EX
yaylog --json -e > explicit-packages.json
.EE
.TP
Output all packages sorted by size (descending) in JSON:
.PP
.EX
yaylog --json -a --sort size:desc
.EE
.TP
Output JSON with specific columns:
.PP
.EX
yaylog --json --columns name,version,size
.EE

.SH AUTHOR
Written by Fernando Nunez <me@fernandonunez.io>.
.SH LICENSE
This project is licensed under the MIT License. See the
.B LICENSE
file for details.

.SH BUGS
Report bugs to the GitHub repository:
.UR https://github.com/Zweih/yaylog
.LI https://github.com/Zweih/yaylog
.UE

.SH SEE ALSO
.B pacman(8),
.B yay(8)

