name: Build and Release qp

on:
  push:
    tags:
      - 'v*'  # trigger on version tags
  workflow_dispatch:  # allow manual trigger from github UI
    inputs:
      ref:
        description: 'Git ref to build'
        required: true
        default: 'main'

permissions:
  contents: write

jobs:
  build:
    name: Build qp for ${{ matrix.arch }}
    runs-on: ubuntu-latest  # ubuntu includes cross-compilation toolchains

    env:
      TAG_NAME: ${{ inputs.ref }}

    strategy:
      matrix:
        arch: [x86_64, armv7h, aarch64]
        include:
          - arch: x86_64
            goarch: amd64
          - arch: armv7h
            goarch: arm
            goarm: 7
          - arch: aarch64
            goarch: arm64

    steps:
      - name: echo TAG_NAME
        run: |
          echo "Resolved TAG_NAME is: ${{ env.TAG_NAME }}"
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Go 1.24.1
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1 # version from go.mod

      - name: Build qp binary
        run: |
          export GOOS=linux GOARCH=${{ matrix.goarch }}
          
          if [ -n "${{ matrix.goarm }}" ]; then
            export GOARM=${{ matrix.goarm }}
          fi
          
          go build -trimpath -ldflags="-s -w" -v -o qp-${{ matrix.arch }} ./cmd/qp

      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: qp-${{ matrix.arch }}
          path: qp-${{ matrix.arch }}

  release:
    name: Release qp
    needs: build
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ inputs.ref }}

    steps:
      - name: echo TAG_NAME
        run: |
          echo "Resolved TAG_NAME is: ${{ env.TAG_NAME }}"
      
      - name: Install dependencies for .SRCINFO and NEWS generation
        run: |
          sudo apt update
          sudo apt install -y pacman fakeroot makepkg gh

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release
          merge-multiple: true

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          KEY_ID=$(gpg --list-keys --with-colons | awk -F: '/^pub/ { print $5; exit }')
          echo -e "5\ny\n" | gpg --batch --yes --no-tty --command-fd 0 --expert --edit-key "$KEY_ID" trust
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Create Draft Release
        run: |
          gh release create "${{ env.TAG_NAME }}" \
            --draft \
            --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate NEWS file
        run: |
          touch ./release/NEWS
          echo "# qp Release Notes" > ./release/NEWS

          gh release list --limit 100 | \
          cut -f1 | \
          grep -E '^v[0-9]+\.' | \
          sort -Vr | \
          awk -v min="v4.1.0" '{ if (system("dpkg --compare-versions " $1 " ge " min) == 0) print $1 }' | \
          while read tag; do
            echo "" >> ./release/NEWS
            echo "## $tag" >> ./release/NEWS
            # demote all headings in generated notes to make NEWS readable
            gh release view "$tag" --json body --template '{{.body}}' | sed 's/^#/##/' >> ./release/NEWS
            echo "" >> ./release/NEWS
          done

          # allow for only one blank between each section
          awk 'BEGIN{blank=0} /^$/ {blank++; if (blank == 1) print ""; next} {blank=0; print}' ./release/NEWS > ./release/NEWS.cleaned
          mv ./release/NEWS.cleaned ./release/NEWS
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Package binaries with manpage and NEWS
        run: |
          cp qp.1 ./release/

          for binary in ./release/qp-*; do
            arch=$(basename "$binary" | cut -d'-' -f2)
          
            tar -czvf ./release/qp-${{ env.TAG_NAME }}-${arch}.tar.gz -C ./release "$(basename "$binary")" qp.1 NEWS
          done

      - name: Package source tarball with NEWS
        run: |
          mkdir -p ./release/temp-qp/qp-${{ env.TAG_NAME }}
          git archive --format=tar HEAD | tar -x -C ./release/temp-qp/qp-${{ env.TAG_NAME }}
          cp ./release/NEWS ./release/temp-qp/qp-${{ env.TAG_NAME }}/

          tar -czf ./release/qp-${{ env.TAG_NAME }}.tar.gz -C ./release/temp-qp qp-${{ env.TAG_NAME }}

      - name: Generate SHA256 checksums
        run: |
          cd ./release
          sha256sum qp-*.tar.gz > SHA256SUMS.txt

      - name: Sign release tarballs
        run: |
          for file in ./release/qp-*.tar.gz; do
            gpg --batch --yes --armor --detach-sign "$file"
          done

      - name: Upload signatures to query-packages-signatures release
        run: |
          gh release create "${{ env.TAG_NAME }}" \
            --repo Zweih/query-packages-signatures \
            --title "Signatures for qp ${{ env.TAG_NAME }}" \
            --notes "Detached signatures for qp release ${{ env.TAG_NAME }}" \
            ./release/qp-*.tar.gz.asc
        env:
          GH_TOKEN: ${{ secrets.QP_SIGNATURES_TOKEN }}

      - name: Update qp-bin and qp-src PKGBUILDs with version and checksums  
        run: |
          git fetch origin packaging
          git checkout packaging

          VERSION="${TAG_NAME#v}"
          CHECKSUMS_FILE=./release/SHA256SUMS.txt

          for pkg in qp-bin qp-src; do
            sed -i "s/^pkgver=.*/pkgver=${VERSION}/" $pkg/PKGBUILD
            sed -i "s/^pkgrel=.*/pkgrel=1/" $pkg/PKGBUILD
          done

          for pkg in qp-bin qp-src; do
            chmod +x update_checksums.sh
            ./update_checksums.sh $pkg/PKGBUILD $CHECKSUMS_FILE 
          done

      - name: Generate pkgver for qp-git
        run: |
          cd qp-git
         
          makepkg --nobuild --nodeps --clean --cleanbuild --noconfirm
          echo "Updated qp-git/pkgver to $(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)"

          rm -rf src pkg qp 

      - name: Generate .SRCINFO for qp-bin, qp-src, and qp-git
        run: |
          for pkg in qp-bin qp-src qp-git; do
            (cd $pkg && makepkg --printsrcinfo --noconfirm > .SRCINFO)
          done

      - name: Commit updated PKGBUILDs, .SRCINFOs, and NEWS to packaging branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          cp ./release/NEWS .
          git add NEWS

          for pkg in qp-bin qp-src qp-git; do
            git add $pkg/PKGBUILD $pkg/.SRCINFO
          done
          
          git commit -m "Update packaging for release ${{ env.TAG_NAME }}"
          git push origin packaging
      - name: Publish Release
        run: |
          gh release upload "${{ env.TAG_NAME }}" ./release/qp-*.tar.gz --clobber
        env:
          GH_TOKEN: ${{ github.token }}

